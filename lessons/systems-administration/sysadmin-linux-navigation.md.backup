# [System Administration] Linux Navigation
*Subtitle.*

![SCYCA Logo](.rsrc/git-banner.png)

# Objectives
- Understand how to navigate the Linux Filesystem
- objective 2
- objective 3

# Introduction
Introduction between 100-150 words.

1. [section 1](#section 1)
2. [section 2](#section 2)
3. [section 3](#section 3)
4. [section 4](#section 4)
5. [section 5](#section 5)

# Lesson
## Section 1
If you want to be able to go somewhere, the first thing you need to now is where you are right now.  With Linux, we can figure this out easily by using the `pwd` command, which stands for "print working directory".  When we run the command, we can see that we are currently in the `/home/hackabit` folder.

![pwd Demo](.rsrc/pwd.png)

But how does this actually work?  Well, `pwd` is actually a program that can read `environment variables` from the operating system.  When you run `pwd` it simply prints out the stored value for the environmental variable named similarly, `PWD`.  We can see all our environment variables by using a different command called `env` that prints out all of them.
  
![env Demo](.rsrc/env.png)

Most of these don't matter to us right now, so don't worry if you don't understand most of these.  I've highlighted the relevant part here which shows us that `PWD=/home/hackabit.`  That's where the `pwd` takes information from when we use it to figure what what directory we're currently in. 

## Section 2
Okay, so now that we know where we are, how do we go somewhere else?  For that we can use a tool called `cd` which is short for "change directory."  This simply changes the environment variable for `PWD` to be a new location.  The location you want to change to comes after the command, like so:  
  
![cd Demo](.rsrc/cd.png)

You can see that when we type run `pwd` before and after, our current working directory changed from `/home/hackabit` to `/tmp`.  You could also verify this by using `env` like we showed you earlier, feel free to try that if you like.

## Section 3
There are a few basic rules and caveats to keep in mind when trying to `cd` to a different directory.  One of these is to know the diffence between `absolute path` and `relative path`.

`absolute path` is the full path to the file or directory you are aiming for.  These will always start from the root folder of the Linux filesystem, which is simply `/`.  From there, you'll need to type the name of every folder, followed by a `/` until you reach the directory that you're trying to get to.  `absolute path` is often preferred by some programs because it removes as much ambiguity as possible.

`relative path` takes a little more explaining.  First we'll need to learn some "shortcuts" that are used to prevent having to type full, absolute paths every time you change directories.  These shortcuts are `.` which refers to your current directory (the same thing you would get from running `pwd`) and `..` which refers to the directory up one level from your current directory.  This is easier to see from an example...  
  
![relativePath Demo](.rsrc/relativePath.png)

You'll see that with a relative path, we don't actually have to type the full pathname all the way from the root folder, instead we can change directories *relative* to or current directory.  
  
One more caveat with relative paths is that you don't always have to type the single `.` to change directories if the target directory is within your current directory.  You can simply omit the `.` for convienience, but it's important to know that the `.` represents your current directory, because it comes into play in many other ways.

## Section 4
Now that we know how to get our bearings and move around, we need to be able to look at different files and folders contained in these directories.  For that, we'll introduce a tool called `ls` which is short for "list."

`ls` works by simply listing all the files and folders in your current working directory by default.  But you can also give it an `absolute path` or `relative path` to list things that are *not* in your current working directory.  An example:  
  
![ls Demo](.rsrc/ls.png)

One thing to notice here is that `ls` did not change our current directory, even when we used it to look inside other folders.  We can also see that there are many different ways to use `ls`: by itself, with an `absolute path`, or with a `relative path`.    
  
But `ls` is much more powerful and flexible than that!  It has additional `flags`, or options that can be applied to it, that list even more detail.  One of these that is very useful is `ls -l`, which lists things in "long" format that shows permissions, file owner, group owner, file sizes, and last modified times.  
  
![lsLong Demo](.rsrc/lsLong.png)
  


## Section 5
***TODO***


# The Real World, Prolific Breaches
Why you should care about the real world implications.

## Example 1
First example text.

## Example 2
Second example text.

## Example 3
Third example text.

# Check YoSelf
## Q1 - x?
a. ```answer 1```<br>
b. ```answer 2```<br>
c. ```answer 3``` <---<br>
d. ```answer 4```<br>

## Q2 - x?
a. ```true```<br>
b. ```false``` <---<br>

## Q3 - x?
a. ```answer 1```<br>
b. ```answer 2```<---<br>
c. ```answer 3```<br>
d. ```answer 4```<br>

# Keep Going, Next Steps
Check out the following curated resources if you'd like to keep learning about this topic to dominate hard challenges.
1. Resource 1 - www.link.com
2. Resource 2 - www.link.com
3. Resource 3 - www.link.com
4. Resource 4 - www.link.com
5. Resource 5 - www.link.com